package cooking;

import (
	"cooking-with-datastar/cmd/internal"
	"cooking-with-datastar/cmd/recipes"
	"fmt"
	"strings"
)

templ Prep(r recipes.Recipe, s recipes.Step) {
	<section id="prep-work" style={ "padding: 1rem;", internal.GetBorderStyle(s, recipes.Prepare) }>
		<h3>Prep work</h3>
		<hr/>
		for _,t := range r.ListPrepTasks() {
			{{
				baseSignalName := internal.ToCamelCase(t.Name)
				showSignalName := baseSignalName + "Show"
				missingDependenciesSignalName := baseSignalName + "MissingDependencies"
			}}
			<div style="margin-bottom: 2rem;">
				<p>
					{ t.Description }
				</p>
				<div style="display: flex; justify-content: end; margin-bottom: var(--pico-typography-spacing-vertical);">
					<button
						id={ fmt.Sprintf("button-%s", t.Name) }
						data-signals={ fmt.Sprintf("{%s: false}", baseSignalName) }
						data-on-click={ fmt.Sprintf("el.disabled = true; $%s = true;", showSignalName) }
						data-on-click__delay.5s={ fmt.Sprintf("@patch('/prep/%s/%s');", r, t.Name) + fmt.Sprintf("$%s = true;", baseSignalName) }
						data-effect={ fmt.Sprintf("$%s = %s", missingDependenciesSignalName, getDependenciesExpression(t.Dependencies)) }
						data-attr-disabled={ "$" + missingDependenciesSignalName }
						if s != recipes.Prepare {
							disabled
						}
					>
						{ internal.ToStartCase(t.Name) }
					</button>
				</div>
				<div class="progress">
					<div class="progress-value" style="display: none;" data-show={ "$" + showSignalName }></div>
				</div>
				<hr/>
			</div>
		}
	</section>
}

func getDependenciesExpression(dependencies []string) string {
	if len(dependencies) == 0 {
		return "false"
	}

	signals := []string{}

	for _, d := range dependencies {
		signals = append(signals, "!$"+internal.ToCamelCase(d))
	}

	return strings.Join(signals, " || ")
}
